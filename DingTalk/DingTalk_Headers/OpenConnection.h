//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSMutableArray, NSSet, NSString;
@protocol OS_dispatch_queue, OpenConnectionDelegate;

@interface OpenConnection : NSObject
{
    struct _opaque_pthread_mutex_t _async_mutex;
    long long _semaphoreCnt;
    _Bool _closed;
    int _checkptRetryCnt;
    _Bool _walEnabled;
    _Bool _rekeyed;
    _Bool _readOnly;
    _Bool _isInTransaction;
    _Bool _isFTSDatabase;
    struct sqlite3 *_sqlite;
    NSString *_pathToDatabase;
    id <OpenConnectionDelegate> _delegate;
    NSSet *_upgradedTables;
    NSString *_specific;
    NSObject<OS_dispatch_queue> *_ioQueue;
    NSMutableArray *_asynBlocks;
    CDUnknownBlockType _checkptJudgeBlock;
}

+ (id)valueFromStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2 queryInfo:(id)arg3 columnType:(int)arg4;
+ (id)valueFromStatement:(struct sqlite3_stmt *)arg1 column:(int)arg2 queryInfo:(id)arg3 columnTypes:(id)arg4;
+ (void)copyValuesFromStatement:(struct sqlite3_stmt *)arg1 toRow:(id)arg2 queryInfo:(id)arg3 columnTypes:(id)arg4 columnNames:(id)arg5;
+ (int)columnTypeToInt:(id)arg1;
+ (int)typeForStatement:(struct sqlite3_stmt *)arg1 atColumn:(int)arg2;
+ (id)columnTypesForStatement:(struct sqlite3_stmt *)arg1;
+ (id)columnNamesForStatement:(struct sqlite3_stmt *)arg1;
+ (id)_checkpointThread;
+ (void)_checkpointThreadEntry:(id)arg1;
+ (_Bool)checkMultithreadAvailable;
+ (void)configureSqlite3Log;
+ (id)ftsNameWithName:(id)arg1;
@property(copy, nonatomic) CDUnknownBlockType checkptJudgeBlock; // @synthesize checkptJudgeBlock=_checkptJudgeBlock;
@property(nonatomic) _Bool isFTSDatabase; // @synthesize isFTSDatabase=_isFTSDatabase;
@property(nonatomic) _Bool isInTransaction; // @synthesize isInTransaction=_isInTransaction;
@property(retain, nonatomic) NSMutableArray *asynBlocks; // @synthesize asynBlocks=_asynBlocks;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *ioQueue; // @synthesize ioQueue=_ioQueue;
@property(copy, nonatomic) NSString *specific; // @synthesize specific=_specific;
@property(copy) NSSet *upgradedTables; // @synthesize upgradedTables=_upgradedTables;
@property(nonatomic) _Bool readOnly; // @synthesize readOnly=_readOnly;
@property(readonly, nonatomic) _Bool rekeyed; // @synthesize rekeyed=_rekeyed;
@property(nonatomic) __weak id <OpenConnectionDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) _Bool walEnabled; // @synthesize walEnabled=_walEnabled;
@property(copy, nonatomic) NSString *pathToDatabase; // @synthesize pathToDatabase=_pathToDatabase;
@property(readonly, nonatomic) struct sqlite3 *sqlite; // @synthesize sqlite=_sqlite;
- (void).cxx_destruct;
- (void)lastErrorCode:(int *)arg1 extendedErrCode:(int *)arg2 errorMessage:(id *)arg3;
- (unsigned long long)rowChanges;
- (unsigned long long)lastInsertRowId;
- (void)bindArguments:(id)arg1 toStatement:(struct sqlite3_stmt *)arg2 sql:(id)arg3;
- (void)inTransaction:(CDUnknownBlockType)arg1 done:(CDUnknownBlockType)arg2;
- (void)inTransaction:(CDUnknownBlockType)arg1;
- (void)beginTransactionWithSync:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)rollback;
- (void)commit;
- (void)beginTransaction;
- (id)calcRowsForStatement:(struct sqlite3_stmt *)arg1 rowClass:(Class)arg2;
- (id)innerExecuteSql:(id)arg1 withParameters:(id)arg2 withClassForRow:(Class)arg3;
- (void)executeSql:(id)arg1 withParameters:(id)arg2 withClassForRow:(Class)arg3 done:(CDUnknownBlockType)arg4;
- (void)executeSql:(id)arg1 withParameters:(id)arg2 done:(CDUnknownBlockType)arg3;
- (void)executeSql:(id)arg1 done:(CDUnknownBlockType)arg2;
- (id)executeSqlV2:(id)arg1 withParameters:(id)arg2 withClassForRow:(Class)arg3 rowChanged:(unsigned long long *)arg4;
- (id)executeSqlV2:(id)arg1 withParameters:(id)arg2 rowChanged:(unsigned long long *)arg3;
- (id)executeSql:(id)arg1 withParameters:(id)arg2 withClassForRow:(Class)arg3;
- (id)executeSql:(id)arg1 withParameters:(id)arg2;
- (id)executeSql:(id)arg1;
- (void)executeSync:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)executeAsyncLocked:(CDUnknownBlockType)arg1;
- (void)executeSyncLocked:(CDUnknownBlockType)arg1;
- (void)raiseSqliteException:(id)arg1;
- (void)configWalCheckpoint:(CDUnknownBlockType)arg1;
- (void)_prepareCheckpoint;
- (void)_delayCheckpoint;
- (void)rekey:(id)arg1 useAuxiliaryFile:(_Bool)arg2 oldPassphrase:(id)arg3 readOnly:(_Bool)arg4;
- (void)openDatabase:(id)arg1 passphrase:(id)arg2 readOnly:(_Bool)arg3 error:(id *)arg4;
- (_Bool)isExecutingInCurrentSyncQueue;
- (_Bool)isBusy:(long long *)arg1;
- (void)close;
- (void)rekey:(id)arg1;
- (void)dealloc;
- (id)initWithPath:(id)arg1 passphrase:(id)arg2 readOnly:(_Bool)arg3 delegate:(id)arg4 error:(id *)arg5;
- (id)initWithPath:(id)arg1 passphrase:(id)arg2 readOnly:(_Bool)arg3 delegate:(id)arg4;
- (id)initWithPath:(id)arg1 readOnly:(_Bool)arg2 delegate:(id)arg3;
- (id)init;
- (void)executeFullSyncWithTableName:(id)arg1 sql:(id)arg2 force:(_Bool)arg3;
- (void)fts_setVersion:(unsigned long long)arg1 forName:(id)arg2;
- (unsigned long long)fts_versionForName:(id)arg1;
- (void)fts_createUpgradeVersionTableIfNotExists;
- (void)createOrUpdateFTSTablesWithConnection:(id)arg1 configure:(id)arg2;
- (void)createOrUpdateFTSTablesWithPassphrase:(id)arg1;
- (void)createUpgradedTables;
- (void)executeFtsConfigureWithPassphrase:(id)arg1;
- (void)setFtsConfigure:(id)arg1;
- (id)ftsConfigure;
- (void)fts_createTableSequenceTableIfNotExists;
- (long long)fts_tableSequence:(id)arg1;
- (long long)fts_sharedingIdWithTableName:(id)arg1 ftsTableName:(id)arg2;
- (id)fts_ftsTableNameWithTableName:(id)arg1;
- (id)getIRUDTableNameWithSql:(id)arg1;
- (void)fts_setLowerBoundWithSql:(id)arg1 inTransaction:(_Bool)arg2;
- (void)fts_rollback;
- (void)fts_commit;
- (void)fts_beginTrasaction;
- (void)setTableToSharedingId:(id)arg1;
- (id)tableToSharedingId;
- (void)setTableToFtsTable:(id)arg1;
- (id)tableToFtsTable;
- (void)setSqlToTable:(id)arg1;
- (id)sqlToTable;

@end

